{
  "html": "<form name=\"fp-search\" class=\"fp-form clearfix\" action=\"/\">\n\t<% if(!config.disableDropdown && _.size(obj.dropdownOptions)) { %>\n\t<div class=\"fp-dropdown fp-dropdown-search\" data-role=\"search-dropdown\">\n\t\t<input name=\"fp-input-search-dropdown\" type=\"hidden\" value=\"<%- selectedOption.id %>\" />\n\t\t<button type=\"button\" class=\"fp-dropdown-value\" aria-label=\"<%- selectedOption.name %>\">\n\t\t\t<span class=\"fp-value\"><%= selectedOption.name %></span>\n\t\t\t<span class=\"fp-dropdown-icon\"></span>\n\t\t</button>\n\t\t<span class=\"fp-dropdown-menu\" aria-label=\"<%- fp.ui.locale('shared-search', 'Search') %>\">\n\t\t\t<ul class=\"fp-dropdown-list\" role=\"listbox\">\n\t\t\t\t<% _.each(dropdownOptions, function(item) { %>\n\t\t\t\t<li class=\"fp-dropdown-list-item\" role=\"option\"><a href=\"<%= item.path %>\" data-value=\"<%- item.id %>\" ><%- item.name %></a></li>\n\t\t\t\t<% }); %> \n\t\t\t</ul>\n\t\t</span>\n\t\t<%= fp.ui.renderTemplate('component/0/animated-loading.html') %>\n\t</div>\n\t<% } %>\n\t<div class=\"fp-search fp-typeahead\">\n\t\t<% const searchPlaceholder =  config.searchPlaceholder || util.formatString('{0} ...', fp.ui.locale('shared-search', 'Search')),\n\t\t\tfilterIsChecked = document.querySelector('.fp-result-filter-checkbox-group input:checked') \n        \t? ' with the selected filters' \n        \t: '';\n\t\t%>\n\t\t<input id=\"fp-input-search-<%- controller.id %>\" name=\"fp-input-search\" type=\"search\" placeholder=\"<%= searchPlaceholder %>\" autocomplete=\"off\" spellcheck=\"true\" class=\"fp-input-search\" aria-label=\"<%= searchPlaceholder + filterIsChecked%>\" fp-autofocus=\"<%- fp.constants.priority.TRIVIAL %>\"/>\n\t\t<button type=\"button\" class=\"fp-icon fp-btn-clear hidden\" data-action=\"clear-search\" aria-label=\"<%= fp.ui.locale('search-aria-clear', 'clear search') %>\"></button>\n\t\t<button type=\"submit\" class=\"fp-icon fp-btn-search\" data-action=\"submit-search\" aria-label=\"<%= fp.ui.locale('search-aria-catalog', 'search our catalog') + filterIsChecked %>\"></button>\n\t</div>\n</form>",
  "js": "fp.Module.SearchBox = fp.Module.extend({\n    construct: function(element, config, template) {\n        this._super(element, config, template);\n\n        _.defaults(this.config, {\n            disableDropdown: false,\n            disableRouteChange: false,\n            enableAutoResize: false,\n            enableTypeahead: false,\n            enableWindowResize: false,\n            type: 'category',\n            enableLocale: true\n        });\n\n        if(_.contains(['category', 'site'], this.config.type)) {\n            this.config.enableTypeahead = fp.config.searchTypeahead.enabled;\n        }\n\n        if (!this.config.routeQueryField) {\n            if(!_.contains(['category', 'site'], this.config.type)) {\n                this.config.routeQueryField = this.config.type + '_q';\n            }\n            else this.config.routeQueryField = 'q';\n        }\n    },\n    init: function(autoRender) {\n        var self = this,\n            config = this.config,\n            promise = this._super(false);\n\n        if(config.type == 'category' && !config.disableDropdown) {\n            fp.ui.loadCategories()\n                .always(function () {\n                    if (self.rendered) {\n                        self.__initDropdownOptions();\n                        self.render();\n                    }\n                });\n        }\n\n        if(config.enableTypeahead) {\n            promise = promise\n                .then(function() {\n                    return util.map.load({\n                        service: service.serviceProviderConfigurationService,\n                        payload: {\n                            service_provider_type: 'product_search_provider'\n                        }\n                    });\n                });\n        }\n\n        return promise\n            .always(function () {\n                //if(!self.config.disableDropdown && fp.__promiseStoreDependencies) {\n                //    fp.log('__promiseStoreDependencies');\n                //    $.when(fp.__promiseStoreDependencies)\n                //        .done(function () {\n                //            self.__initDropdownOptions();\n                //            self.render();\n                //        });\n                //}\n\n                self.__initDropdownOptions();\n                if(util.getBoolean(autoRender, true)) self.render();\n            });\n    },\n    render: function(params) {\n        var self = this,\n            config = this.config,\n            scope = this.scope,\n            $element = this.$element,\n            inputSelector = 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]';\n\n        scope.selectedOption = this.__getSelectedOption();\n\n        $element.find(inputSelector)\n            .typeahead('destroy');\n\n        this._super(params);\n\n        if(!config.disableDropdown) {\n            $element.addClass('invisible');\n\n            var proxyDropdownChange = $.proxy(this.__onDropdownChange, this);\n            $element.find('[data-role=\"search-dropdown\"]').dropdown({\n                autoInit: true,\n                onChange: proxyDropdownChange,\n                onAfterChange: proxyDropdownChange\n            });\n        }\n\n        //trigger setting of input\n        this.reset();\n\n        var $input = $element.find(inputSelector);\n\n        if(config.enableTypeahead && $input.length) {\n            var datasetConfig = _.concat([], config.typeaheadDatasets || fp.config.searchTypeahead.datasets),\n                hashedDatasetConfig = _.indexBy(datasetConfig, 'identifier'),\n                hashedCallbacks = {},\n                enableTypeaheadOpen = false,\n                dataSets = [],\n                googleSearchConfig = _.getObject(util.map.get('spcProductSearchProvider').get('google_search').config),\n                wait = util.getInteger(googleSearchConfig.product_search_wait_time_milliseconds),\n                resetDebounce = false;\n            \n            if(!hashedDatasetConfig.q) {\n                datasetConfig.unshift({identifier: 'q'});\n            }\n\n            for(let n=0; n<datasetConfig.length; n++) {\n                const configItem = datasetConfig[n];\n                if(configItem.enabled === false) {\n                    delete hashedDatasetConfig[configItem.identifier];\n                    datasetConfig.splice(n, 1);\n                    n--;\n                }\n            }\n\n            //remove name field from google search dataset if default search is not enabled\n            if(!hashedDatasetConfig.q && hashedDatasetConfig.did_you_mean && googleSearchConfig.enable_search_suggestions_fetch) {\n                delete hashedDatasetConfig.did_you_mean.name;\n            }\n\n            if(wait < 500) wait = 500;\n\n            _.each(datasetConfig, function (configItem) {\n                hashedCallbacks[configItem.identifier] = $.noop;\n\n                dataSets.push({\n                    name: configItem.identifier,\n                    limit: 10,\n                    sync: false,\n                    templates: {\n                        header: function() {\n                            let clearAll;\n                            if(configItem.identifier == 'your_terms') {\n                                let title = fp.ui.locale('shared-clear-all-search-terms', 'Click to clear all search terms'),\n                                    label = fp.ui.locale('shared-clear', 'clear');\n                                clearAll = util.formatString('<a href=\"javascript:;\" class=\"fp-action-link pull-right fp-normal\" data-action=\"tt-clear-search-all\" title=\"{0}\" aria-label=\"{0}\">{1}</a>', title, label);\n                            }\n                            return configItem.name && util.formatString('<div class=\"fp-tt-header\">{0}{1}</div>', configItem.name, clearAll);\n                        },\n                        suggestion: function (value) {\n                            let clear;\n                            if(configItem.identifier == 'your_terms') {\n                                let title = fp.ui.locale('shared-clear-search-term', 'Click to clear search term');\n                                clear = util.formatString('<button type=\"button\" class=\"fp-icon fp-btn-clear\" data-action=\"tt-clear-search\" aria-label=\"{0}\"></button>', title);\n                            }\n\n                            return util.formatString(\n                                '<div role=\"option\"><a href=\"javascript:;\" class=\"{0}\"><span class=\"fp-icon {1}\"></span>{2}</a>{3}</div>',\n                                configItem.className || 'fp-tt-q',\n                                configItem.iconClassName || 'fp-icon-search',\n                                fp.S.getString(_.isObject(value) ? (value.path || value.name) : value),\n                                clear\n                            );\n                        }\n                    },\n                    source: _.debounce(function (query, syncResults, asyncResults) {\n                        var results;\n\n                        hashedCallbacks[configItem.identifier] = asyncResults;\n\n                        if(!resetDebounce) {\n                            resetDebounce = true;\n                            if (self.__promiseSuggestions) {\n                                self.__promiseSuggestions.promise().deferred().reject('abort');\n                                delete self.__promiseSuggestions;\n                            }\n\n                            if (!self.config.disableDropdown && scope.selectedOption.id && scope.selectedOption.type !== 'product') {\n                                _.each(datasetConfig, function (configItem) {\n                                    hashedCallbacks[configItem.identifier](null);\n                                });\n                            }\n                            else {\n                                let searchTerms = Lockr.get('sbSearchTerms');\n                                if (!query) {\n                                    self.__promiseSuggestions = $.Deferred().promise();\n                                    _.defer(function () {\n                                        results = {\n                                            your_terms: searchTerms\n                                        };\n                                        self.__promiseSuggestions.deferred().resolve();\n                                    });\n                                }\n                                else {\n                                    self.__promiseSuggestions = service.productSearchSuggestionService\n                                        .get({\n                                            q: query,\n                                            department_id: util.getUndefinedIfEmpty(self.config.persistCategoryId ? scope.stateParams.department_id : scope.stateParams.search_option_id)\n                                            // ,hang_for: 5 //5 seconds\n                                        }, {ignoreErrors: true})\n                                        .done(function (resp) {\n                                            results = _.getObject(resp);\n                                            results.your_terms = searchTerms;\n\n                                            //if (fp.isLocal() && query == 'test ehlo') {\n                                            //    results = {\n                                            //        \"did_you_mean\": [\n                                            //            \"test hello\"\n                                            //        ],\n                                            //        \"variants\": [\n                                            //            \"ehlo test\"\n                                            //        ],\n                                            //        \"related\": [\n                                            //            \"test again\",\n                                            //            \"testing 2\"\n                                            //        ]\n                                            //    };\n                                            //}\n                                        });\n                                }\n                            }\n\n                            $.when(self.__promiseSuggestions)\n                                .always(function () {\n                                    results = _.getObject(results);\n                                    _.each(datasetConfig, function (configItem) {\n                                        hashedCallbacks[configItem.identifier](results[configItem.identifier]);\n                                    });\n                                    resetDebounce = false;\n                                });\n                        }\n                    }, wait, false)\n                });\n            });\n\n            $input\n                .typeahead({\n                    minLength: 3,\n                    highlight: true,\n                    limit: fp.constants.pager.ITEMS_PER_PAGE,\n                    classNames: {\n                        wrapper: (config.version == 2 ? 'form-control ': '' ) + 'fp-typeahead-wrapper',\n                        menu: 'fp-dropdown-menu'/* + fp.ui.getClassName(fp.isLocal(), ' fp-display-block')*/,\n                        dataset: 'fp-dropdown-list',\n                        suggestion: 'fp-dropdown-list-item',\n                        input: 'fp-tt-input',\n                        hint: 'fp-tt-hint',\n                        selectable: 'fp-tt-selectable',\n                        empty: 'fp-tt-empty',\n                        open: 'fp-tt-open',\n                        cursor: 'fp-tt-cursor',\n                        highlight: 'fp-tt-highlight'\n                    }\n                }, dataSets);\n\n            var typeahead = $input.data('tt-typeahead');\n            typeahead.menu.$node\n                .on('click', '[data-action^=\"tt-clear-search\"]', function(event) {\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n\n                    var term = $(this).attr('data-action') == 'tt-clear-search' && $(event.target).parent().find('.fp-tt-q').text();\n\n                    self.__removeSearchTerm(term);\n                    $input.trigger('focus');\n                });\n\n            var inputId = $input.attr('id');\n            $input\n                .prev('.fp-tt-hint')\n                .attr('name', 'fp-input-search-hint')\n                .removeAttr('fp-autofocus')\n                .attr('aria-label', \"Search Hints\")\n                .attr('id', inputId +'-hint');\n\n            $element\n                .on('mousedown touchstart keydown', 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]', function(event) {\n                    switch(event.keyCode) {\n                        case fp.constants.keycode.TAB:\n                        case fp.constants.keycode.ESC:\n                            return;\n                        case fp.constants.keycode.ENTER:\n                            $(this).typeahead('close');\n                            return;\n                    }\n                    enableTypeaheadOpen = true;\n                    $input.trigger('focus');\n                })\n                .on('typeahead:beforeopen', 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]', function(event) {\n                    if(\n                        !(enableTypeaheadOpen || fp.S(scope.stateParams.q).ne(fp.S($input.val()).trim(), true)) ||\n                        (scope.selectedOption.id && scope.selectedOption.type != 'product')\n                    ) {\n                        event.preventDefault();\n                    }\n                })\n                .on('typeahead:open', 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]', function(event) {\n                    $input.parent().addClass('fp-tt-wrapper-open');\n                    enableTypeaheadOpen = false;\n                })\n                .on('typeahead:close', 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]', function(event) {\n                    $input.parent().removeClass('fp-tt-wrapper-open');\n                })\n                .on('typeahead:select', 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]', function(event, item, dataSetName) {\n                    if(config.disableRouteChange) {\n                        self.__performSearch();\n                        return;\n                    }\n\n                    var stateManager = scope.stateManager,\n                        query = _.isObject(item) ? null : item,\n                        selectedOption = scope.selectedOption,\n                        params = {};\n                        options = {};\n\n                    self.__addSearchTerm(query);\n\n                    params[selectedOption.routeQueryField || self.config.routeQueryField] = util.getNullIfEmpty(query);\n\n                    if (config.type == 'site' && !selectedOption.state) {\n                        var uiRouter = fp.ui.router,\n                            urlOptions = {};\n                        if(selectedOption.routeQueryField) urlOptions.routeSearchParams = params;\n                        else urlOptions.searchParams = params;\n\n                        next = uiRouter.routeManager.buildUrl(selectedOption.path, urlOptions);\n\n                        options.absolute = true;\n                        params = null;\n                    }\n                    else {\n                        var categoryId = (_.isObject(item) && item.id) || (self.config.persistCategoryId && (scope.stateParams.department_id || scope.stateParams.category_id)),\n                            category,\n                            categoryState;\n\n                        if(categoryId) category = _.getObject(fp.departmentHash[categoryId]);\n    \n                        if(fp.config.enableFullProductSearch) {\n                            categoryState = stateManager.states.shop;\n                        }\n                        else {\n                            categoryState = stateManager.getCategoryState(category, 'product');\n                            $.extend(params, {\n                                department_id: categoryId,\n                                category_id: categoryId,\n                                search_option_id: util.getNullIfEmpty(scope.stateParams.search_option_id)\n                            });\n    \n                            if(scope.stateParams.sort && stateManager.is(categoryState)) {\n                                params.sort = scope.stateParams.sort;\n                            }\n                        }\n    \n                        if(_.isObject(item) && category && stateManager.is(categoryState)) {\n                            var typeahead = $input.data('tt-typeahead');\n                            if(typeahead) typeahead.input.query = '';\n                        }\n                        \n                        next = categoryState;\n                        options.canonical_url = category && category.canonical_url;\n                    }\n\n                    stateManager.go(next, params, options);\n                });\n        }\n\n        $element\n            //.on('click', 'button.fp-btn-search', function(event){\n            //    event.preventDefault();\n            //    self.__performSearch();\n            //})\n            .on('click', '[data-action=\"clear-search\"]', function(event){\n                event.preventDefault();\n                var $input =  $element.find('form[name=\"fp-search\"] input[name=\"fp-input-search\"]'),\n                    value = scope.stateParams.q || $input.val();\n\n                if(self.config.enableTypeahead) {\n                    $input.typeahead('val', '');\n                }\n\n                $input.val('').focus(true);\n\n                self.__toggleClear();\n                // if(value || !_.contains(['category', 'site'], self.config.type)) self.__performSearch();\n            })\n            .on('submit', 'form[name=\"fp-search\"]', function(event) {\n                event.preventDefault();\n                self.__performSearch();\n            })\n            .on('keyup', 'form[name=\"fp-search\"] input[name=\"fp-input-search\"]', $.proxy(self.__toggleClear, self));\n\n            if(fp.config.enableSearchPlaceholderChange) self.__setPlaceholder();\n    },\n    reset: function(payload) {\n        var selectedOption = this.__getSelectedOption();\n        this.resize({searchOptionId: selectedOption.id});\n\n        this.__onSearchItems(null, payload);\n    },\n    resize: function(options) {\n        if(this.$element.closest(':hidden').length) return;\n\n        options = $.extend({searchOptionId: ''}, options);\n\n        var $element = this.$element,\n            config = this.config;\n\n        if(!config.disableDropdown) {\n            var $searchDropdown = $element.find('[data-role=\"search-dropdown\"]');\n            if (!$searchDropdown.length) return;\n\n            var dropdown = $searchDropdown.data('fp.ui.Component'),\n                $searchWrapper = $element.find('.fp-search'),\n                offset = Math.ceil($searchDropdown.getBoundingClientRect().width),\n                searchOptionId = options.searchOptionId || dropdown?.getValue() || this.__getSearchOptionId(),\n                searchPlaceholder = config.searchPlaceholder;\n\n            if(!searchOptionId && config.type == 'categories') searchOptionId = fp.defaultDepartment.id;\n\n            dropdown?.setValue(searchOptionId);\n\n            if (offset != 0) {\n                //offset++;\n                $searchWrapper.css({paddingLeft: (offset - 1), marginLeft: -offset});\n                if (!config.fixedSearchIcon) $searchWrapper.find('.fp-btn-search').css('left', offset);\n            }\n\n            if (fp.config.enableSearchPlaceholderChange && searchOptionId != fp.defaultDepartment.id) {\n                searchPlaceholder = fp.ui.locale('shared-search', 'Search');\n                searchPlaceholder = util.formatString('{0} {1} ...', searchPlaceholder, $searchDropdown.find('.fp-dropdown-value .fp-value').text().toLowerCase());\n            }\n            else if(!searchPlaceholder) searchPlaceholder = config.searchPlaceholder;\n\n            var $input = $searchWrapper.find('input[name=\"fp-input-search\"]')\n                .attr('placeholder', searchPlaceholder)\n                .attr('aria-label', searchPlaceholder);\n\n            //if($searchWrapper.offset().top == $searchDropdown.offset().top) {\n            $element.removeClass('invisible');\n            //}\n        }\n\n        if(!config.enableAutoResize) return;\n\n        var $parent = $element.parent(),\n            $children = $parent.children();\n        if($children.length <= 1) return;\n\n        var searchWidth = $parent.width() - ($element.outerWidth(true) - $element.width());\n\n        $element.css('width', '');\n        $children.each(function() {\n            if(this == $element[0]) return;\n            searchWidth -= $(this).outerWidth(true);\n            searchWidth -= 9; // make room for space between controls\n        });\n\n        $element.css('width', Math.floor(searchWidth - 1) + 'px');\n    },\n    busy: function() {\n        this.$element.find('[data-role=\"search-dropdown\"]')\n            .addClass('fp-animated-loading-container');\n    },\n    idle: function() {\n        this.$element.find('[data-role=\"search-dropdown\"]')\n            .removeClass('fp-animated-loading-container');\n    },\n    getValue: function() {\n        var $searchForm = this.$element.find('form[name=\"fp-search\"]'),\n            $search = $searchForm.find('input[name=\"fp-input-search\"]'),\n            dropdown = $searchForm.find('[data-role=\"search-dropdown\"]').data('fp.ui.Component'),\n            categoryId = dropdown ? dropdown.getValue() : null;\n\n        return {\n            q: fp.S($search.val()).trim().s,\n            department_id: categoryId\n        };\n    },\n    toggleShow: function(action) {\n        var $element = this.$element;\n        if(action == 'show') $element.addClass('show');\n        else $element.toggleClass('show');\n\n        var hasShow = $element.hasClass('show');\n\n        $(document.body).toggleClass('fp-is-search-box-active', hasShow);\n\n        if(hasShow) {\n            $element\n                .find('input[fp-autofocus]')\n                .focus(true);\n        }\n    },\n    __addSearchTerm: function(term) {\n        if(this.config.enableTypeahead &&\n            (term = fp.S(term).trim().s) &&\n            !(!this.config.disableDropdown && this.scope.selectedOption.id && this.scope.selectedOption.type != 'product')\n        ) {\n            var searchTerms = _.getArray(Lockr.get('sbSearchTerms'));\n            _.remove(searchTerms, term);\n            searchTerms.unshift(term);\n            if(searchTerms.length > 10) searchTerms.length = 10;\n            Lockr.set('sbSearchTerms', searchTerms);\n        }\n    },\n    __removeSearchTerm: function(term) {\n        var $input = this.$element.find('form[name=\"fp-search\"] input[name=\"fp-input-search\"]'),\n            typeahead = $input.data('tt-typeahead'),\n            dataset = _.findWhere(typeahead.menu.datasets, {name: 'your_terms'}),\n            searchTerms;\n\n        if(term) {\n            searchTerms = _.getArray(Lockr.get('sbSearchTerms'));\n            _.remove(searchTerms, term);\n        }\n\n        Lockr.set('sbSearchTerms', searchTerms);\n        if(dataset) dataset.clear();\n        //if(dataset) dataset.update();\n        typeahead.menu.update();\n    },\n    __initDropdownOptions: function() {\n        var dropdownOptions = [],\n            hashedDropdownOptions = {},\n            config = this.config,\n            dropdownOptionConfig = config.dropdownOptionsSPC || config.dropdownOptions;\n\n\n        if(!config.disableDropdown) {\n            var stateManager = this.scope.stateManager;\n\n            if (_.size(dropdownOptionConfig)) {\n                _.each(dropdownOptionConfig, function(item) {\n                    item = $.extend({}, item);\n                    if(!item.path) {\n                        item.path = stateManager.categoryHref(item, {\n                            type: item.type,\n                            relative: false\n                        });\n                    }\n\n                    if (!(item.routeQueryField || item.queryField)) {\n                        if(item.type && !_.contains(['category', 'site'], item.type)) {\n                            item.routeQueryField = item.type + '_q';\n                        }\n                        else item.routeQueryField = 'q';\n                    }\n\n                    dropdownOptions.push(item);\n                    hashedDropdownOptions[item.id] = item;\n                });\n            }\n            else {\n                var options = {\n                    type: 'product',\n                    relative: false,\n                    enableTemplate: true\n                },\n                params = {},\n                item = {\n                    id: fp.defaultDepartment.id,\n                    name: fp.ui.locale('shared-all', 'All'),\n                    path: stateManager.categoryHref(null, options, params),\n                    type: 'product'\n                };\n\n                dropdownOptions.push(item);\n                hashedDropdownOptions[item.id] = item;\n\n                _.each(fp.defaultDepartment.items, function(item) {\n                    item = {\n                        id: item.id,\n                        name: item.name,\n                        path: stateManager.categoryHref(item, options, params),\n                        type: 'product'\n                    };\n\n                    dropdownOptions.push(item);\n                    hashedDropdownOptions[item.id] = item;\n                });\n            }\n        }\n\n        this.hashedDropdownOptions = hashedDropdownOptions;\n        this.scope.dropdownOptions = dropdownOptions;\n    },\n    __attachScopeEvents: function() {\n        var self = this,\n            proxyResize = function() {\n                self.resize();\n            },\n            $scope = $(this.scope)\n                .on(fp.events.SEARCH, $.proxy(this.__onSearchItems, this))\n                .on(fp.events.RESIZE, proxyResize);\n\n        if(this.config.enableWindowResize) {\n            var event = util.formatString('resize.searchbox.{0}', this.id);\n            $(window)\n                .off(event)\n                .on(event, proxyResize);\n        }\n        else {\n            $scope\n                .on(fp.events.MEDIA_WIDTH_CHANGE, proxyResize);\n        }\n\n        if(fp.config.enableSearchPlaceholderChange) {\n            $scope.on(fp.events.MEDIA_WIDTH_CHANGE, function(event, payload) {\n                self.__setPlaceholder();\n            });\n        }\n\n        if (this.scope.selectedOption.type == 'product') {\n            $scope\n                .on(fp.events.MODULE_RENDERED, function (event, payload) {\n                    if(!_.isObject(payload)) return;\n\n                    switch(payload.name) {\n                        case 'product-detail':\n                            self.$element.find('form[name=\"fp-search\"] input[name=\"fp-input-search\"]').val('');\n\n                            self.__toggleClear();\n                    }\n                });\n        }\n    },\n    __setPlaceholder: function() {\n        var self = this,\n            $searchInput = self.$element.find('input[name=\"fp-input-search\"]'),\n            searchPlaceholder = self.config.searchPlaceholder,\n            screenLarge = $(window).width() > fp.constants.matchMediaMin.LG,\n            searchString = screenLarge ? fp.ui.locale('shared-search', 'Search') : fp.ui.locale('search-medium', 'Search');\n\n        if(!(searchPlaceholder || screenLarge)) searchPlaceholder = util.formatString('{0} ...', searchString);\n\n        $searchInput.attr('placeholder', searchPlaceholder);\n    },\n    __getSearchOptionId: function() {\n        return this.config.disableRouteChange ? null : this.scope.stateParams.search_option_id;\n    },\n    __getSelectedOption: function(value) {\n        var searchOptionId = value || this.__getSearchOptionId(),\n            stateManager = this.scope.stateManager;\n        if(!searchOptionId && this.config.type == 'site') {\n            var pathOption;\n            selectedOption = _.find(this.scope.dropdownOptions, function(item) {\n                if(item.state && stateManager.is(item.state)) return true;\n                if(item.path) pathOption = item;\n            });\n            if(!selectedOption && pathOption && pathOption.queryField) {\n                var router = fp.ui.router;\n                if(router.location.pathname() == pathOption.path && router.routeManager.urlParams[pathOption.queryField]) {\n                    selectedOption = pathOption;\n                }\n            }\n        }\n        else selectedOption = searchOptionId && this.hashedDropdownOptions[searchOptionId];\n\n        return _.getObject(selectedOption || _.first(this.scope.dropdownOptions));\n    },\n    __performSearch: function() {\n        var scope = this.scope,\n            //stateParams = scope.stateParams,\n            config = this.config,\n            value = fp.S(this.$element.find('form[name=\"fp-search\"] input[name=\"fp-input-search\"]').val()).trim().s,\n            dropdown = this.$element.find('[data-role=\"search-dropdown\"]').data('fp.ui.Component'),\n            searchOptionId = config.disableDropdown ? this.__getSearchOptionId() : dropdown && dropdown.getValue(),\n            promise;\n\n        this.__addSearchTerm(value);\n\n        if(!config.disableRouteChange) {\n            promise = service.searchRedirectService\n                .get({\n                    q: value\n                }, {\n                    ignoreErrors: true\n                });\n        }\n\n        $.when(promise)\n            .done(function (resp) {\n                //mobile site does not support store changing from web_redirect\n                if(resp && resp.web_redirect && !(fp.config.enableMobile && fp.S(resp.web_redirect).contains('store_id='))) {\n                    var webRedirect = resp.web_redirect;\n                    if(webRedirect.startsWith('http')) window.open(webRedirect, '_blank');\n                    else window.location.href = webRedirect;\n                }\n                else {\n                    if(searchOptionId == fp.defaultDepartment.id) searchOptionId = null;\n\n                    var stateManager = scope.stateManager,\n                        selectedOption = scope.selectedOption,\n                        beforeParams = {\n                            q: value,\n                            search_option_id: searchOptionId,\n                            type: config.type,\n                            department_id: null,\n                            category_id: null\n                        };\n\n                    //if (config.disableDropdown) {\n                    //    beforeParams.department_id = util.getNullIfEmpty(stateParams.department_id);\n                    //    beforeParams.category_id = util.getNullIfEmpty(stateParams.category_id);\n                    //}\n                    //else beforeParams.department_id = searchOptionId;\n\n                    if (\n                        config.type == 'category' ||\n                        (config.type == 'product' && !config.disableDropdown)\n                    ) {\n                        beforeParams.department_id = searchOptionId;\n                    }\n\n                    fp.trigger(fp.events.SEARCH_BEFORE_CHANGE, $.extend({selectedOption: selectedOption}, beforeParams));\n                    if(selectedOption.disableRouteChange || config.disableRouteChange) return;\n                \n                    var params = {},\n                        options = {},\n                        selectedQueryField = selectedOption.queryField || selectedOption.routeQueryField || config.routeQueryField,\n                        next;\n\n                    params[selectedQueryField] = util.getNullIfEmpty(beforeParams.q);\n\n                    if(fp.config.enableFullProductSearch) {\n                        next = stateManager.states.shop;\n                    }\n                    else {\n                        var uiRouter = fp.ui.router;\n                        if (config.type == 'site' && !selectedOption.state) {\n                            var urlOptions = {};\n                            if(selectedOption.routeQueryField) urlOptions.routeSearchParams = params;\n                            else urlOptions.searchParams = params;\n\n                            next = uiRouter.routeManager.buildUrl(selectedOption.path, urlOptions);\n                            options.absolute = true;\n                            params = null;\n\n                            //stateManager.go(next, null, {absolute: true});\n                            //fp.log(stateManager.href(next, null, {absolute: true}));\n                        }\n                        else {\n                            var type = selectedOption.type || util.getStateValue(config.type == 'category', 'product');\n                            next = stateManager.getCategoryState(selectedOption, type);\n\n                            $.extend(params, {\n                                department_id: util.getNullIfEmpty(beforeParams.department_id),\n                                category_id: util.getNullIfEmpty(beforeParams.category_id),\n                                search_option_id: util.getNullIfEmpty(searchOptionId)\n                            });\n\n                            if(uiRouter.location.isCurrentPage(stateManager.href(next))) {\n                                options.inherit = config.enableInherit;\n\n                                params.page = params.id = params.product_id = null;\n                                params[config.routeQueryField] = null;\n                                var queryField;\n                                _.each(scope.dropdownOptions, function (item) {\n                                    queryField = item.queryField || item.routeQueryField;\n                                    if (queryField) params[queryField] = null;\n                                });\n\n                                params[selectedQueryField] = util.getNullIfEmpty(beforeParams.q);\n                                if (config.persistCategoryId) {\n                                    delete params.department_id;\n                                    delete params.category_id;\n                                }\n                            }\n                        }\n                    }\n\n                    stateManager.go(next, params, options);\n                }\n            });\n    },\n    __toggleClear: function() {\n        var $form = this.$element.find('form[name=\"fp-search\"]'),\n            hasValue = fp.S($form.find('input[name=\"fp-input-search\"]').val()).length > 0;\n\n        $form.find('[data-action=\"clear-search\"]').toggleClass('hidden', !hasValue);\n\n        this.$element.toggleClass('fp-has-value', hasValue);\n    },\n    __onSearchItems: function(event, payload) {\n        if (this.__promiseSuggestions) {\n            this.__promiseSuggestions.promise().deferred().reject('abort');\n            delete this.__promiseSuggestions;\n        }\n\n        payload = _.getObject(payload);\n        var scope = this.scope,\n            $input = this.$element.find('form[name=\"fp-search\"] input[name=\"fp-input-search\"]'),\n            selectedOption = _.getObject(scope.selectedOption),\n            stateManager = scope.stateManager,\n            stateParams = stateManager.initialized ? stateManager.stateParams : fp.ui.router.routeManager.urlParams,\n            value;\n\n        if(selectedOption.queryField) {\n            value = fp.S.getString(stateParams[selectedOption.queryField]);\n        }\n        else {\n            value = fp.S.getString(payload.q, this.config.disableRouteChange ?\n                $input.val() :\n                stateParams[selectedOption.routeQueryField || this.config.routeQueryField]);\n        }\n\n        try {\n            value = decodeURIComponent(value);\n        }\n        catch(exc){}\n\n        if(!stateManager.is(scope.states.storeLocator)){\n            $input.val(value);\n\n            this.__addSearchTerm(value);\n        }\n    \n        this.__toggleClear();\n    \n        this.resize();\n    },\n    __onDropdownChange: function(value) {\n        var dropdown = this.$element.find('[data-role=\"search-dropdown\"]').data('fp.ui.Component');\n        if(!dropdown.isOpen && !this.config.disableRouteChange) {\n            value = value || this.__getSearchOptionId() || fp.defaultDepartment.id;\n            var stateManager = this.scope.stateManager,\n                searchOptionId = value != fp.defaultDepartment.id ? value : null;\n\n            if(this.config.type != 'site') {\n                stateManager.go(stateManager.current, {search_option_id: searchOptionId}, {\n                    preventDefault: true,\n                    inherit: true\n                });\n            }\n        }\n\n        this.scope.selectedOption = this.__getSelectedOption(value);\n\n        this.resize();\n    }\n});\n\nreturn fp.Module.SearchBox;\n\n//# sourceURL=module/search-box/search-box.js"
}